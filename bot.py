from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ
user_data = {}

# –§—É–Ω–∫—Ü–∏—è /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ü–æ–µ—Ö–∞–ª–∏! ü•≥", callback_data="start_application")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üòâ\n\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ \"Mistery World\".\n\n–î–ª—è –∑–∞–ø—É—Å–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    if query.data == "start_application":
        await query.edit_message_text("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å.\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –≤—ã–±–∏—Ä–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ó–∞—è–≤–∫–∞\".")
        keyboard = [[InlineKeyboardButton("–ó–∞—è–≤–∫–∞", callback_data="application")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏.", reply_markup=reply_markup)

    elif query.data == "application":
        user_data[query.from_user.id] = {}  # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª –∑–∞—è–≤–∫–∞\n\n–í–∞—à NickName?")
        context.user_data['state'] = 'nickname'

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    state = context.user_data.get('state')

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø –∑–∞—è–≤–∫–∏
    if state == 'nickname':
        user_data[user_id]['nickname'] = update.message.text
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
        context.user_data['state'] = 'age'
    elif state == 'age':
        user_data[user_id]['age'] = update.message.text
        await update.message.reply_text("–ù–∞ –∫–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏–≥—Ä–∞–µ—Ç–µ? (Java / Bedrock)")
        context.user_data['state'] = 'platform'
    elif state == 'platform':
        user_data[user_id]['platform'] = update.message.text
        await update.message.reply_text("–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?")
        context.user_data['state'] = 'source'
    elif state == 'source':
        user_data[user_id]['source'] = update.message.text
        await update.message.reply_text("–°–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞?")
        context.user_data['state'] = 'agreement'
    elif state == 'agreement':
        user_data[user_id]['agreement'] = update.message.text
        await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –∑–∞—è–≤–∫—É! üòÑ\n\n–í —Ç–µ—á–µ–Ω–∏–∏ 10 —á–∞—Å–æ–≤ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –∏ –≤—ã–Ω–µ—Å–µ–º –≤–µ—Ä–¥–∏–∫—Ç.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ —á–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
        await send_application_to_admin(context, user_id, update.message.from_user.username)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['state'] = None
        user_data.pop(user_id, None)

async def send_application_to_admin(context, user_id, username):
    application = user_data[user_id]
    admin_message = (
        f"–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
        f"–¢–µ–ª–µ–≥—Ä–∞–º –¥–∞–Ω–Ω—ã–µ:\n(@{username})\n\n"
        f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"1. –ù–∏–∫–Ω–µ–π–º: {application['nickname']}\n"
        f"2. –ì–æ–¥–∏–∫–æ–≤: {application['age']}\n"
        f"3. –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {application['platform']}\n"
        f"4. –£–∑–Ω–∞–ª: {application['source']}\n"
        f"5. –°–æ–≥–ª–∞—Å–∏–µ: {application['agreement']}\n\n"
        "@MoskI_I @moidar5366"
    )
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
